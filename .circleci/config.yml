# Versión de la API de CircleCI
version: 2.1

# 1. ORBS: Importamos el Orb oficial de Slack (esto no cambia)
orbs:
  slack: circleci/slack@4.12.5 

# 2. JOBS: Definimos los trabajos individuales
jobs:
  
  # Job 1: Construir el entorno virtual e instalar dependencias
  build:
    docker:
      - image: cimg/python:3.11 # 👈 CAMBIO: Usamos una imagen de Python
    steps:
      - checkout # Clona el código del repositorio
      - restore_cache: # Restaura la caché del venv (si existe)
          keys:
            # La clave de caché se basa en el archivo de dependencias
            - v1-dependencies-{{ checksum "requirements.txt" }} 
            - v1-dependencies- # Llave de fallback
      - run:
          name: Instalar dependencias
          command: |
            # Creamos un entorno virtual
            python3 -m venv .venv
            # Activamos el entorno virtual
            . .venv/bin/activate
            # Instalamos las dependencias
            pip install -r requirements.txt
      - save_cache: # Guarda la caché del venv
          paths:
            - .venv # 👈 CAMBIO: Guardamos el entorno virtual
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - persist_to_workspace: # Pasa el venv y el código al siguiente job
          root: .
          paths:
            - . # Pasamos todo el directorio (incluyendo el .venv)

  # Job 2: Revisar el código (Linting)
  lint:
    docker:
      - image: cimg/python:3.11 # 👈 CAMBIO: Usamos una imagen de Python
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: Instalar dependencias
          command: |
            python3 -m venv .venv
            . .venv/bin/activate
            pip install -r requirements.txt
            # Asumimos que flake8 está en requirements.txt o lo instalamos aquí
            pip install flake8 
      - run:
          name: Correr Linter (Flake8)
          command: |
            . .venv/bin/activate
            # 👈 CAMBIO: Usamos un linter de Python como flake8
            flake8 . 

  # Job 3: Correr las pruebas
  test:
    docker:
      - image: cimg/python:3.11 # 👈 CAMBIO: Usamos una imagen de Python
    steps:
      - attach_workspace: # Carga el código y el .venv del job 'build'
          at: .
      - run:
          name: Correr Pruebas (Pytest)
          command: |
            # Activamos el entorno virtual que recibimos
            . .venv/bin/activate 
            # 👈 CAMBIO: Usamos una herramienta de testing de Python como pytest
            pytest 
      
      # 3. NOTIFICACIONES (esto no cambia)
      - slack/notify:
          event: pass 
          template: basic_success_1
      - slack/notify:
          event: fail 
          template: basic_fail_1

# 4. WORKFLOWS: Orquestamos cómo se ejecutan los jobs (esto no cambia)
workflows:
  version: 2
  build_lint_and_test_workflow:
    jobs:
      - build
      - lint
      - test:
          requires:
            - build